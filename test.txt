import cv2
import numpy as np
import idx2numpy


class Layer:
    def __init__(self, n_neurons, n_inputs):
        self.weights = np.random.rand(n_neurons * n_inputs).reshape(n_neurons, n_inputs)

    def forward(self, inputs):
        return np.dot(inputs, self.weights)


class Activation:
    def forward(self, inputs):
        return 1 / (1 + np.exp(-inputs))


def main():
    # inputs = np.array([[1, 2, 3, 2.5], [2., 5., -1., 2], [-1.5, 2.7, 3.3, -0.8]])
    # layer = Layer(inputs.shape[1], inputs.shape[0])
    # activation = Activation()
    #
    # output = layer.forward(inputs)
    #
    # print(output)
    # print(activation.forward(output))

    file_images = 'data/t10k-images.idx3-ubyte'
    arr_images = idx2numpy.convert_from_file(file_images)
    file_labels = 'data/t10k-labels.idx1-ubyte'
    arr_labels = idx2numpy.convert_from_file(file_labels)
    print("Images: ", arr_images.shape)
    print("labels: ", arr_labels.shape)
    print(arr_labels)
    cv2.imshow("Image", arr_images[1])
    for i in range(28):
        for j in range(28):
            digit = arr_images[1, i, j]
            print((3 - len(str(int(digit)))) * ' ' + str(int(digit)), end=' ')
        print()
    cv2.waitKey()


if __name__ == "__main__":
    main()
